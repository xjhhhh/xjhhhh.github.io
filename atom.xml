<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JiangHao&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.japi.club/"/>
  <updated>2019-07-08T01:46:16.341Z</updated>
  <id>http://www.japi.club/</id>
  
  <author>
    <name>JiangHao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用hexo搭建博客并部署到github</title>
    <link href="http://www.japi.club/2019/07/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.japi.club/2019/07/08/使用hexo搭建博客/</id>
    <published>2019-07-08T00:49:00.000Z</published>
    <updated>2019-07-08T01:46:16.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装nodejs"><a href="#1、安装nodejs" class="headerlink" title="1、安装nodejs"></a>1、安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a></h3><p>Hexo是一款基于Node.js的静态博客框架，需要安装一下nodejs和npm工具<br>而nodejs自带npm，所以nodejs安装成功后可以直接使用命令 node -v 和 npm -v 来查看node版本和npm版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><h3 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></h3><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具<br>安装成功后可以使用 git –version 查看git版本信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></p><h3 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a></h3><p>安装好git和nodejs后就可以安装hexo了，使用命令npm install hexo-cli -g安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><p>安装成功后可以使用 hexo -v 查看hexo版本信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></p><h3 id="4、初始化hexo项目"><a href="#4、初始化hexo项目" class="headerlink" title="4、初始化hexo项目"></a>4、初始化hexo项目</h3><p>cd到要创建项目的目录<br>初始化项目，这个myblog自己随便取什么名字<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure></p><p>然后进入项目目录，安装依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>最后，启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>然后控制台最后会打印出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p><p>此时，浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就能打开博客了</p><h3 id="5、部署到github"><a href="#5、部署到github" class="headerlink" title="5、部署到github"></a>5、部署到github</h3><p>首先，你要有一个github账户，没有就去注册一个<br>注册完登录后，新建一个名为 yourname.github.io 的仓库，yourname是你的用户名<br>仓库创建好了，回到本地，打开项目根目录下的站点配置文件_config.yml，添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourGithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>此时还需要安装deploy-git，也就是部署的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>安装完全后，就可以部署到github了，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署好了，过几分钟就可以在 <a href="https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a> 访问到你的博客了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、安装nodejs&quot;&gt;&lt;a href=&quot;#1、安装nodejs&quot; class=&quot;headerlink&quot; title=&quot;1、安装nodejs&quot;&gt;&lt;/a&gt;1、安装&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="前端 - 搭建博客" scheme="http://www.japi.club/categories/%E5%89%8D%E7%AB%AF-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="搭建博客" scheme="http://www.japi.club/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://www.japi.club/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Vue父子组件以及非父子组件通信</title>
    <link href="http://www.japi.club/2019/05/27/test/"/>
    <id>http://www.japi.club/2019/05/27/test/</id>
    <published>2019-05-27T09:27:00.000Z</published>
    <updated>2019-07-04T03:23:17.829Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一.祖先组件向后代组件传值–使用 provide / inject</strong></p><p>1.祖先组件使用provide提供数据<br><img src="\images\pasted-0.png" alt="upload successful"><br>2.后代组件使用inject注入数据<br><img src="\images\pasted-3.png" alt="upload successful"></p><p><img src="\images\pasted-4.png" alt="upload successful"><br>结果<br><img src="\images\pasted-5.png" alt="upload successful"></p><p><strong>二.父子组件通信之使用props和监听器</strong></p><p>1、子组件定义props，同时子组件有一个按钮向上提交一个handleClick事件<br><img src="\images\pasted-9.png" alt="upload successful"><br>2、父组件通过props向子组件传递数据，同时在组件上直接监听子组件的事件handleClick<br><img src="\images\pasted-8.png" alt="upload successful"><br>结果<br><img src="\images\pasted-10.png" alt="upload successful"><br>子组件点击按钮后，父组件监听到事件并把子组件的消息加载出来<br><img src="\images\pasted-11.png" alt="upload successful"></p><p><strong>三.父子组件通信之使用dispatch和boardcast</strong><br>vue中$dispatch 和 $broadcast 方法已经被弃用，但很多高级组件还一直在用，像element,dispatch和broadcast更多是用在跨级的组件通信上面<br>1、首先在main.js中给vue的原型上添加两个方法<br>dispatch是子组件向上传递事件<br>boardcast是父级组件向下传递事件<br><img src="\images\pasted-12.png" alt="upload successful"><br>2、使用<br>因为方法是直接添加到vue原型上的，所以父组件可以直接用$boardcast向子组件传递数据，同时可以直接在mounted中监听来自子组件的dispatch事件，子组件可以直接用$dispatch向父级组件传递数据，同时可以在mounted中监听来自父级组件的boradcast事件</p><p><img src="\images\pasted-15.png" alt="upload successful"></p><p><img src="\images\pasted-14.png" alt="upload successful"></p><p><img src="\images\pasted-16.png" alt="upload successful"></p><p>结果</p><p><img src="\images\pasted-17.png" alt="upload successful"><br>父级组件点广播消息后，子级组件接收到父级组件的消息<br><img src="\images\pasted-18.png" alt="upload successful"><br>子级组件点来自子组件的后，父级组件也可以接收到子级组件的消息<br><img src="\images\pasted-19.png" alt="upload successful"></p><p><strong>四.中央事件总线bus</strong><br>公共事件总线eventBus的实质就是创建一个vue实例，通过一个空的vue实例作为桥梁实现vue组件间的通信。它是实现非父子组件通信的一种解决方案<br>使用方法：<br>1、在main.js中给vue的原型上初始化eventBus<br><img src="\images\pasted-21.png" alt="upload successful"><br>2、直接使用$eventBus.$emit传递事件<br><img src="\images\pasted-22.png" alt="upload successful"><br>3、在mounted中使用$eventBus.$on监听事件<br><img src="\images\pasted-23.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一.祖先组件向后代组件传值–使用 provide / inject&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.祖先组件使用provide提供数据&lt;br&gt;&lt;img src=&quot;\images\pasted-0.png&quot; alt=&quot;upload successful&quot;&gt;
      
    
    </summary>
    
      <category term="Vue" scheme="http://www.japi.club/categories/Vue/"/>
    
    
      <category term="Vue " scheme="http://www.japi.club/tags/Vue/"/>
    
  </entry>
  
</feed>
