<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JiangHao&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.japi.club/"/>
  <updated>2019-07-04T01:26:04.652Z</updated>
  <id>http://www.japi.club/</id>
  
  <author>
    <name>JiangHao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World1</title>
    <link href="http://www.japi.club/2019/07/04/hello-world/"/>
    <id>http://www.japi.club/2019/07/04/hello-world/</id>
    <published>2019-07-04T01:25:10.000Z</published>
    <updated>2019-07-04T01:26:04.652Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo在next主题下如何添加分类和标签</title>
    <link href="http://www.japi.club/2019/07/03/hexo%E5%9C%A8next%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
    <id>http://www.japi.club/2019/07/03/hexo在next主题下如何添加分类和标签/</id>
    <published>2019-07-03T00:56:16.000Z</published>
    <updated>2019-07-03T00:57:05.967Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端 - 搭建博客" scheme="http://www.japi.club/categories/%E5%89%8D%E7%AB%AF-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="搭建博客" scheme="http://www.japi.club/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="前端" scheme="http://www.japi.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="next" scheme="http://www.japi.club/tags/next/"/>
    
      <category term="hexo" scheme="http://www.japi.club/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Vue父子组件以及非父子组件通信</title>
    <link href="http://www.japi.club/2019/05/27/test/"/>
    <id>http://www.japi.club/2019/05/27/test/</id>
    <published>2019-05-27T09:27:00.000Z</published>
    <updated>2019-07-04T03:23:17.829Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一.祖先组件向后代组件传值–使用 provide / inject</strong></p><p>1.祖先组件使用provide提供数据<br><img src="\images\pasted-0.png" alt="upload successful"><br>2.后代组件使用inject注入数据<br><img src="\images\pasted-3.png" alt="upload successful"></p><p><img src="\images\pasted-4.png" alt="upload successful"><br>结果<br><img src="\images\pasted-5.png" alt="upload successful"></p><p><strong>二.父子组件通信之使用props和监听器</strong></p><p>1、子组件定义props，同时子组件有一个按钮向上提交一个handleClick事件<br><img src="\images\pasted-9.png" alt="upload successful"><br>2、父组件通过props向子组件传递数据，同时在组件上直接监听子组件的事件handleClick<br><img src="\images\pasted-8.png" alt="upload successful"><br>结果<br><img src="\images\pasted-10.png" alt="upload successful"><br>子组件点击按钮后，父组件监听到事件并把子组件的消息加载出来<br><img src="\images\pasted-11.png" alt="upload successful"></p><p><strong>三.父子组件通信之使用dispatch和boardcast</strong><br>vue中$dispatch 和 $broadcast 方法已经被弃用，但很多高级组件还一直在用，像element,dispatch和broadcast更多是用在跨级的组件通信上面<br>1、首先在main.js中给vue的原型上添加两个方法<br>dispatch是子组件向上传递事件<br>boardcast是父级组件向下传递事件<br><img src="\images\pasted-12.png" alt="upload successful"><br>2、使用<br>因为方法是直接添加到vue原型上的，所以父组件可以直接用$boardcast向子组件传递数据，同时可以直接在mounted中监听来自子组件的dispatch事件，子组件可以直接用$dispatch向父级组件传递数据，同时可以在mounted中监听来自父级组件的boradcast事件</p><p><img src="\images\pasted-15.png" alt="upload successful"></p><p><img src="\images\pasted-14.png" alt="upload successful"></p><p><img src="\images\pasted-16.png" alt="upload successful"></p><p>结果</p><p><img src="\images\pasted-17.png" alt="upload successful"><br>父级组件点广播消息后，子级组件接收到父级组件的消息<br><img src="\images\pasted-18.png" alt="upload successful"><br>子级组件点来自子组件的后，父级组件也可以接收到子级组件的消息<br><img src="\images\pasted-19.png" alt="upload successful"></p><p><strong>四.中央事件总线bus</strong><br>公共事件总线eventBus的实质就是创建一个vue实例，通过一个空的vue实例作为桥梁实现vue组件间的通信。它是实现非父子组件通信的一种解决方案<br>使用方法：<br>1、在main.js中给vue的原型上初始化eventBus<br><img src="\images\pasted-21.png" alt="upload successful"><br>2、直接使用$eventBus.$emit传递事件<br><img src="\images\pasted-22.png" alt="upload successful"><br>3、在mounted中使用$eventBus.$on监听事件<br><img src="\images\pasted-23.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一.祖先组件向后代组件传值–使用 provide / inject&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.祖先组件使用provide提供数据&lt;br&gt;&lt;img src=&quot;\images\pasted-0.png&quot; alt=&quot;upload successful&quot;&gt;
      
    
    </summary>
    
      <category term="Vue" scheme="http://www.japi.club/categories/Vue/"/>
    
    
      <category term="Vue " scheme="http://www.japi.club/tags/Vue/"/>
    
  </entry>
  
</feed>
